2018.12.6
反射机制：
概念：指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能调用它的任意一个方法。这种动态获取信息，以及
动态调用对象方法的功能叫java的反射机制

反射机制的应用：
生成动态代理，AOP面向切面编程

反射机制的原理：
首先明确，类也是对象！
类中的内容，有属性，构造函数，字段，方法
.class文件在硬盘中是一个文件，当载入内存中，可以认为是一个对象，是java.lang.class的对象

反射机制获取类有三种方法：
1.调用对象的getClass()方法
Student t = new Student();
Class c = s.getClass();

2.通过类的class调用
Class c = Student.class;

3.通过Class.forName()方法
Class c = Class.forName("reflect.Student");

反射主要可以方便灵活创建代码，而这些代码可以在运行时装配，无需在组件之间进行源代码链接。
注意：反射的使用如果不当，成本会很高。

为什么要使用反射机制呢？先看下面的概念
静态编译：在编译时确定对象类型，绑定对象，即通过
动态编译：运行时确定对象类型，绑定对象。动态编译最大限度发挥了java的灵活性，体现了多态的应用，可以降低类之间的耦合性。

编译：java源码-->javac-->.class文件(二进制文件)-->jvm-->机器语言(不同平台不同类)
把java语言转换成java虚拟机语言。
流程：
词法分析器：将源码转换为Token流，即找出if,else,for等关键字
语法分析器：将Token流转化为语法树，将上述的Token组成一句句话，或者说是一句句代码块，检查这些代码块是否符合java语言的规范
语义分析器：将语法树转化为注解语法树，将复杂的语法转换成简单的语法（注解，foreach转化为for）并做一些检查，添加一些代码（默认构造器）
代码生成器：将注解语法树转化为字节码（即将一个数据结构转化为另一个数据结构）

比如说开发一个软件，程序编译后，发布，当需要更新的时候，不可能卸载软件再重新安装，所以需要动态的，采用反射机制，可以不用卸载，
因为只需要在运行的时候才动态创建和编译。

反射的缺点：就是对性能有影响，因为反射做的事情是一种解释的操作，他告诉jvm我们希望做什么，并且jvm满足我们的要求。这肯定比直接执行相同的操作要慢。
























