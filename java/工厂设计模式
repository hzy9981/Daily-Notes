2018.11.30
工厂设计模式
  工厂设计模式属于创建型模式，提供了一种创建对象的最佳方式。
  在工厂设计模式种，我们创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。
  
  定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。
  主要解决了接口选择的问题。
  
  什么时候使用工厂设计模式呢？
  明确了在不同情况下创建不同的实例的时候
  
  如何实现呢？
  让其子类实现工厂接口，返回的也是一个抽象的
  
  关键点：创建过程在子类执行
  
  应用实例：hibernate换数据库的话只需要换方言和驱动即可
  
  好处：1.想创建对象的时候，只需要知道对象的名字即可
        2.扩展性好，当需要增加一个产品，只需要扩展一个工厂类
        3.具体实现不会暴露出来
        
 缺点：每增加一个产品的时候，都需要增加一个具体类和对象实现工厂，系统中的类的个数成倍增长，增加系统的复杂度和耦合性。
 
 使用场景：1.日志记录器：日志可以记录到本地硬盘，远程服务器，用户可以选择记录到哪里
          2.数据库访问，数据库有变化的时候，mysql？Oracle？
          
注意！工厂模式只适合复杂对象的使用，简单对象使用会适得其反，详情见缺点

实现过程：
创建工厂-->用工厂对象调用get对象的方法，方法中带上具体实例的参数（这一步在工厂类中new了一个对象）-->用这个get方法返回的对象就到了具体的实例类
然后这个实现类继承了共同的接口，这个复写接口中的方法-->最后用这个实现类的对象调用接口中的方法。

为什么要实现共同的接口，因为接口的作用，就是方便在接口中增加方法，这样就不用去修改源码，只需要修改接口即可，统一管理不同的实例子类。
思考：如果想要某个类型的实例类有自己特殊的方法，也就是接口以外的方法，如何实现？在调用代码的时候，声明一个本类对象，用这个本类对象去调用这个特殊的方法
但是这个方法的前提就是知道这个对象的类型。Rectangle Rectangle = (Rectangle) shape2;

一个类实现某个接口，必须重写接口中的所有方法吗？
答案是否定的！
关键是看子类是否是抽象类，如果子类不是抽象类，就必须实现接口中所有的方法，反之不必。因为抽象类中允许有抽象方法的存在！

抽象类的定义：
java中含有抽象方法的类就是抽象类，抽象类主要是用来进行类型隐藏和充当全局变量。
抽象类的特点：
抽象类不能实例化










