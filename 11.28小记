htm、html、shtml的区别：
首先，三者都是静态网页的后缀。
htm和html是完全静态的网页，不通过服务器编译，浏览器可以直接读取的。
htm和html几乎没有区别
shtml可以使用ssi的一些指令，ssi是web服务器提供的一套命令，这些命令只要直接嵌入到HTML文档的注释之中即可，如：<!--#include file="info.htm"-->

匿名内部类是直接使用new来生成一个对象的引用
内部类就是为了实现多继承。
使用内部类的好处：封装性

删除数组尾部元素，改变数组的长度
const arr = [11, 22, 33, 44, 55, 66];
arr.length = 3;
console.log(arr); //=> [11, 22, 33]

设计模式：
1.单例设计模式
这个设计模式的初衷是什么？举个例子，如果我要打开电脑上的一个任务管理器，那么如果再打开一个呢？这两个任务管理器的界面内容应该是用户需要看到的，
但是内容是一样的，也不是完全一样，比如上面显示的cpu占用10%和15%，但是这样就会造成资源的浪费，正确的做法就是如果我再打开一个任务管理器，就直接
跳转到第一个打开的任务管理器。不然的话，打开了两个任务管理器，CPU占用的资源不一样，用户不知道哪个是真的了。
  所以单例设计模式的目的就是节约系统资源，为了确保对象的唯一性，无法再创建一个同类型的其他对象，所有的操作只能围绕这一个实例。
为了防止每次new都实例化一个新的对象，需要禁止外部使用new创建对象，因此使用到关键字private修饰构造函数，例如：private task(){}
在内部创建对象：private static task t = null;

在内部创建的对象，外界如何取调用？
增加一个公有的静态方法：public static task getInstance(){
                            if(t == null){
                               t = new task();
                            }
                            return t;
                   }
在getInstance方法中，先判断t对象是否存在，如果不存在，就new一个t对象，并返回，否则直接返回t。加上static关键字，外界就可以使用类名来访问此方法。
这样的话，第一次调用的时候就创建t实例，再次调用的时候，已经存在就直接返回第一次创建的实例，从而确保了对象的唯一性。
